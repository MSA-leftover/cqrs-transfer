buildscript{
    ext{
        springBootVersion = '3.0.2'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

allprojects { //전체에 전부 적용되는 것.
    group = 'com.msa.leftover'
    version = '0.0.1-SNAPSHOT'
}

subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'

    sourceCompatibility = '17'

    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'io.projectreactor:reactor-test'

        //Lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        //Devtools
        developmentOnly 'org.springframework.boot:spring-boot-devtools'

        //HATEOAS
        implementation (group: 'org.springframework.hateoas', name: 'spring-hateoas'){
            // Spring mvc exclude
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter-web'
        }

        //[Manage]Actuator
        implementation 'org.springframework.boot:spring-boot-starter-actuator'

        //Junit5
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'

        //Json
        implementation 'org.json:json:20220320'

        //Jackson
        implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
        implementation 'com.fasterxml.jackson.core:jackson-databind'

    }

    task initSourceFolders {
        sourceSets*.java.srcDirs*.each {
            if (!it.exists()) {
                it.mkdirs()
            }
        }
        sourceSets*.resources.srcDirs*.each {
            if (!it.exists()) {
                it.mkdirs()
            }
        }
    }
}

project(':command'){
    dependencies {
        implementation project(':core')//공통 Core 를 함께 사용.
    }
}

project(':query'){
    dependencies {
        implementation project(':core')//공통 Core 를 함께 사용.
    }
}